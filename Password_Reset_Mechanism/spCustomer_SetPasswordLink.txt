USE [RetailWeb]
GO

/****** Object:  StoredProcedure [dbo].[spCustomer_SetPasswordLink]    Script Date: 9/15/2017 8:28:25 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



ALTER PROCEDURE [dbo].[spCustomer_SetPasswordLink]
	@CustomerEmail	varchar(255),		-- the email given by the customer
	@VisitorID	varchar(255),		-- a unique ID tied to the session and set in global.asa
	@HashedToken    varchar(255) OUTPUT
/*=======================================================================================
Name of Procedure	: dbo.spCustomer_SetPasswordLink
Date Created		: 06/27/17
Created By		: John Hovanec
Description		: create and return a password reset token to be used in a password reset link
Used By			: 
=========================================================================================
Date Modified		Developer	Description of Mod/ModNumber
09/25/17		John H.		Store customerID instead of email address
=========================================================================================
Example Invovation:
DECLARE @Token varchar(255)
EXEC spCustomer_SetPasswordLink 'jhovanec@daedalusbooks.com', '9300492C00000012', @HashedToken = @Token OUTPUT
========================================================================================*/

AS
BEGIN
	SET NOCOUNT ON

	DECLARE @ValueToHash varchar(255),					-- combination of VisitorId and SYSDATETIME()
			@strReturn_Text varchar(255),
			@MAX_RESET_ATTEMPTS int,				-- treating this like a constant
			@lastAttempt smalldatetime,				-- the most recent attempt for an Email Address/VisitorID with a valid timestampt
			@firstAttempt smalldatetime,				-- the first attempt for an Email Address/VisitorID with a valid timestampt
			@expireTime smalldatetime,				-- when the reset link expires. Currently set to 1 day after the first request
			@totalAttempts int,					-- total attempts within 24 hours of the first attempt
			@attemptID int,						-- reference to the primary key in tblRtlCustomerPwdReset
			@custID varchar(255)					-- holds customerID if found from Email Address entered

	Set @MAX_RESET_ATTEMPTS = 10
	Set @ValueToHash = CONCAT(@VisitorID, SYSDATETIME())			--combine VisitorId and SYSDATETIME() to get a unique value to hash

	-- First check if the email address given is in our records
	DECLARE @tmp Table (CustomerID varchar(255),				-- table variable to hold results from spCustomer_GetInfoByEmail
			EmailAddress varchar(255), 
			Pwd varchar(255), 
			Fname varchar(255), 
			Mname varchar(255), 
			Lname varchar(255), 
			Company varchar(255), 
			DaedalusID varchar(255));

	INSERT INTO @tmp							-- get result from spCustomer_GetInfoByEmail
	EXEC spCustomer_GetInfoByEmail @CustomerEmail 

	SELECT @custID = CustomerID FROM @tmp					-- get the customerID if the email address exists
		
	IF @custID IS NULL OR @CustomerEmail=' '
	BEGIN
		SET @HashedToken = -2						-- return -2 if the submitted email address doesn't exist
		SELECT @HashedToken
		RETURN								-- exit as we don't want to write an entry for an invalid email address
	END

	-- Get the first attempt and expiration for a given VisitorID
	SELECT TOP 1 @firstAttempt = RequestTimeStamp, @expireTime = PwdResetExpiration, @VisitorID = VisitorID FROM tblRtlCustomerPwdReset 
	WHERE (@VisitorID = VisitorID) AND CURRENT_TIMESTAMP < PwdResetExpiration
	ORDER BY PwdResetExpiration ASC
	
	-- Get the last attempt for a given VisitorID 
	-- If there have been no requests, or it has been 1 day since the last request, @lastAttempt will be equal to 0.
	SELECT TOP 1 @lastAttempt = RequestTimeStamp, @attemptID =AttemptID FROM tblRtlCustomerPwdReset 
	WHERE (@VisitorID = VisitorID) AND CURRENT_TIMESTAMP < PwdResetExpiration
	ORDER BY PwdResetExpiration DESC

	-- Count the attempts for timestamps that have not expired by VisitorID
	SELECT TOP 1 @totalAttempts = COUNT(*) FROM tblRtlCustomerPwdReset
	WHERE (@VisitorID = VisitorID) AND CURRENT_TIMESTAMP < PwdResetExpiration
	
	-- If this is the first attempt, or it's been 1 day since the last request
	IF @totalAttempts = 0
	BEGIN
		SELECT @HashedToken = SUBSTRING(CONVERT(varchar(255), (HashBytes('SHA2_256', @ValueToHash)), 1), 3, 32)
		BEGIN TRY
			INSERT INTO tblRtlCustomerPwdReset
			VALUES (@VisitorID, @custID, @HashedToken, @totalAttempts+1, CURRENT_TIMESTAMP,  dateadd(d,1,current_timestamp)) 
		END TRY

		BEGIN CATCH		
			SET @strReturn_Text = ERROR_MESSAGE();
		END CATCH
		SELECT @HashedToken
	END

	-- Repeat attempt where a VisitorID is found with a valid timestamp, and @totalAttempts < @MaxResetAttempts
	IF @totalAttempts > 0 AND @totalAttempts < @MAX_RESET_ATTEMPTS
		BEGIN
			SELECT @HashedToken = SUBSTRING(master.dbo.fn_varbintohexstr(HashBytes('SHA2_256', @ValueToHash)), 3, 32)
			BEGIN TRY
				INSERT INTO tblRtlCustomerPwdReset
				VALUES (@VisitorID, @custID, @HashedToken, @totalAttempts+1, CURRENT_TIMESTAMP, @expireTime) -- note: using first attempt expire time 
			END TRY

			BEGIN CATCH		
				SET @strReturn_Text = ERROR_MESSAGE();
			END CATCH
			SELECT @HashedToken
		END

	-- If maxed out on attempts return -1
	IF @totalAttempts = @MAX_RESET_ATTEMPTS
		BEGIN
			SET @HashedToken = -1
			SELECT @HashedToken
		END

END





GO


