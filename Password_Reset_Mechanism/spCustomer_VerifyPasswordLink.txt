USE [RetailWeb]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spCustomer_VerifyPasswordLink]
	@Token		varchar(255),
	@EmailAddress	varchar(255) OUTPUT
/*=======================================================================================
Name of Procedure	: dbo.spCustomer_VerifyPasswordLink
Date Created		: 06/30/17
Created By		: John Hovanec
Description		: check that a password reset token is valid, return submitted email address if valid
Used By			: 
=========================================================================================
Date Modified		Developer	Description of Mod/ModNumber

=========================================================================================
Example Invovation:
DECLARE @Email varchar
EXEC spCustomer_VerifyPasswordLink 'b71bb2e290c6d09ca42d9fbf50dfd3d3',@EmailAddress = @Email OUTPUT
========================================================================================*/

AS
BEGIN
	SET NOCOUNT ON

	DECLARE @expireTime smalldatetime,
		@custID varchar(255)
	
	-- Get the attempt info for the given token
	SELECT @expireTime = PwdResetExpiration, @custID = CustomerID
	FROM tblRtlCustomerPwdReset 
	WHERE @Token = ResetToken

	-- Get the customer's email address based off of their customerID
	DECLARE @tmp Table (EmailAddress varchar(255),			-- table variable to hold results from spCustomer_GetInfoByCustomerID
			Pwd varchar(255), 
			Fname varchar(255), 
			Mname varchar(255), 
			Lname varchar(255), 
			Company varchar(255), 
			DaedalusID varchar(255));

	INSERT INTO @tmp						-- get result from spCustomer_GetInfoByCustomerID
	EXEC spCustomer_GetInfoByCustomerID @custID 

	SELECT @EmailAddress = EmailAddress FROM @tmp			-- get the email address exists

	-- Check that the token has not expired
	IF CURRENT_TIMESTAMP < @expireTime 
		BEGIN
			UPDATE tblRtlCustomerPwdReset			-- expire the link
			SET PwdResetExpiration = CURRENT_TIMESTAMP	-- set expiration to current timestamp
			WHERE @Token = ResetToken 
			SELECT @EmailAddress				-- return the user's email address if valid
		END
	Else
		BEGIN
			SET @EmailAddress = 'INVALID'			-- return 'INVALID' if token is not valid
			SELECT @EmailAddress
		END
END


GO


